<?php
/**
 * @author Amasty Team
 * @copyright Copyright (c) 2020 Amasty (https://www.amasty.com)
 * @package Amasty_RulesPro
 */


class Amasty_RulesPro_Model_Rule_Condition_Oattr extends Mage_Rule_Model_Condition_Abstract
{
    public function loadAttributeOptions()
    {
        $hlp = Mage::helper('amrules');
        $collection = Mage::getModel('eav/entity_attribute')->getCollection();
        $collection->addFieldToFilter('is_visible_on_front', 1);
        $collection->addFieldToFilter('entity_type_id', Mage::getModel('eav/entity')->setType('order')->getTypeId());
        $attributes = array();

        foreach ($collection as $attribute) {
            $attributes[$attribute->getAttributeCode()] = $attribute->getFrontendLabel();
        }
        $this->setAttributeOption($attributes);
        return $this;
    }

    public function getAttributeElement()
    {
        $element = parent::getAttributeElement();
        $element->setShowAsText(true);
        return $element;
    }

    public function getInputType()
    {
        $attribute = $this->getCurrentAttribute();
        if (!$attribute) {
            $attribute = Mage::getModel('eav/entity_attribute')->loadByCode(
                Mage::getModel('eav/entity')->setType('order')->getTypeId(),
                array_search($this->getAttributeName(), $this->getAttributeOption())
            );
            $this->setCurrentAttribute($attribute);
        }
        switch ($attribute->getFrontendInput()) {
            case 'select':
            case 'radios':
            case 'boolean':
                return 'select';
            case 'checkboxes':
                return 'multiselect';
            case 'date':
                switch ($attribute->getNote()) {
                    case 'time':
                        return 'datetime';
                    default:
                        return 'date';
                }
            default:
                return 'string';
        }
    }

    public function getValueElementType()
    {
        $attribute = $this->getCurrentAttribute();
        switch ($attribute->getFrontendInput()) {
            case 'select':
            case 'radios':
            case 'boolean':
                return 'select';
            case 'file':
                return 'file';
            case 'checkboxes':
                return 'multiselect';
            case 'date':
                switch ($attribute->getNote()) {
                    case 'time':
                        return 'datetime';
                    default:
                        return 'date';
                }
            default:
                return 'text';
        }
    }

    public function asHtml()
    {
        return parent::asHtml(); // TODO: Change the autogenerated stub
    }

    public function getExplicitApply()
    {
        return true;
    }

    public function getValueElement()
    {
        $element = parent::getValueElement();
        if (is_object($this->getCurrentAttribute())) {
            switch ($this->getCurrentAttribute()->getFrontendInput()) {
                case 'date':
                    $element->setImage(Mage::getDesign()->getSkinUrl('images/grid-cal.gif'));
                    break;
            }
        }
        return $element;
    }

    public function getValueSelectOptions()
    {
        $options = array();

        $attribute = $this->getCurrentAttribute();
        if (!is_null($attribute)) {
            switch ($attribute->getFrontendInput()) {
                case 'select':
                case 'radios':
                case 'boolean':
                case 'checkboxes':
                    $options = $attribute->getSource()->getAllOptions();
                    break;
            }
        }

        $key = 'value_select_options';
        if (!$this->hasData($key)) {
            $this->setData($key, $options);
        }
        return $this->getData($key);
    }

    /**
     * Validate Address Rule Condition
     *
     * @param Varien_Object $object
     * @return bool
     */
    public function validate(Varien_Object $object)
    {
        $session = Mage::getSingleton('checkout/type_onepage')->getCheckout();
        $orderAttributes = $session->getAmastyOrderAttributes();

        if ((isset ($orderAttributes)) && array_key_exists($this->getAttribute(), $orderAttributes)) {
            $num = $orderAttributes[$this->getAttribute()];
        } else {
            return false;
        }

        return $this->validateAttribute($num);
    }

}
